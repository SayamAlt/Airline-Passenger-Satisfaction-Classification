name: CI/CD Pipeline for Airline Passenger Satisfaction Classification Model

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  pipeline:
    runs-on: ubuntu-latest
    permissions:
      id-token: write 

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8 

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[all] mlflow joblib pandas flask

      # Step 5: Set up DVC remote
      - name: Configure DVC Remote
        run: |
          dvc remote add -d myremote ./dvc_remote_storage
          dvc remote list

      # Step 5: Pull data and artifacts
      - name: Pull DVC Artifacts
        run: dvc pull

      # Step 6: Run DVC pipeline stages
      - name: Run DVC Pipeline
        run: dvc repro

      # Step 7: Push results to DVC remote storage
      - name: Push DVC Artifacts
        run: dvc push

      # Step 8: Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t airline-satisfaction-app .

      # Step 9: Run Docker image
      - name: Run Docker image
        run: |
          docker run -d -p 9000:8000 airline-satisfaction-app

      # # Step 8: Deploy Flask App
      # - name: Deploy Flask App
      #   run: |
      #     chmod +x run_flask.sh
      #     ./run_flask.sh

      # Step 10: Deploy to Azure Web App
      - name: Deploy Flask app to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          package: .
          slot-name: production
        
      # Step 11: Notify deployment success
      - name: Notify Deployment Success 
        run: echo "Deployment Successful!"
